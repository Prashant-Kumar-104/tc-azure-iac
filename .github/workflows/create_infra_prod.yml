name: "IAC Terraform Prod CI/CD Pipeline"

on:
  workflow_dispatch:
  push:
    branches:
      - dev

env:
  #  TF_VERSION: "1.6.0"  #  Terraform version
  WORKING_DIR: azure-iac #"./teamcenter-azure-iac/environments/prod_001"

permissions:
  id-token: write
  contents: read

jobs:
  _1_core_infra_deploy:
    name: "1_core_infra Deployment"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{env.WORKING_DIR}}/1_core_infra/env-dev

    env: # Define Azure credentials at the job level
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

    steps:
      # Checkout repository
      - name: "Checkout Repository"
        uses: actions/checkout@v5

      # - name: Debug - list files
      #   run: |
      #     pwd
      #     ls -R        

      # Setup Terraform
      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        
      - uses: terraform-linters/setup-tflint@v5

      - name: Show version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run TFLint
        run: tflint -f compact
        
      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0

      - name: "Azure Login"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show

      # Terraform Initialization
      - name: "Terraform Init"
        working-directory: ${{ env.WORKING_DIR }}/1_core_infra/env-dev
        run: |
          echo $env.WORKING_DIR
          terraform init

      #  # Terraform Format Check ##
      # - name: "Terraform Format"
      #   working-directory: ${{ env.WORKING_DIR }}
      #   run: terraform fmt -check -recursive

      #  Terraform Validation
      - name: "Terraform Validate"
        working-directory: ${{ env.WORKING_DIR }}/1_core_infra/env-dev
        run: terraform validate

        #  Terraform Plan
      - name: "Terraform Plan"
        working-directory: ${{ env.WORKING_DIR }}/1_core_infra/env-dev
        #run: terraform plan -var-file=terraform.tfvars
        #run: terraform plan -var-file=terraform.tfvars
        run: |
          echo $env.WORKING_DIR
          terraform plan -out=tfplan
        #terraform plan -out=tfplan

      #  Terraform Apply
      - name: "Terraform Apply"
        working-directory: ${{ env.WORKING_DIR }}/1_core_infra/env-dev
        #run: terraform apply -auto-approve -var-file=terraform.tfvars
        run: |
          terraform apply --auto-approve
        #terraform output -json > terraform_output.json
        #terraform apply "tfplan"

############################################################################

  _2_application_gateway:
    name: "2_application_gateway"
    runs-on: ubuntu-latest
    needs: _1_core_infra_deploy
    defaults:
      run:
        working-directory: ${{env.WORKING_DIR}}/2_application_gateway/env-dev
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        
      - name: Setup tflint
        uses: terraform-linters/setup-tflint@v5

      - name: Show version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run TFLint
        run: tflint -f compact

      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0

      - name: "Azure Login"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show          

      # Terraform Initialization
      - name: "Terraform Init"
        working-directory: ${{ env.WORKING_DIR }}/2_application_gateway/env-dev
        run: terraform init

      - name: "Terraform Plan"
        working-directory: ${{ env.WORKING_DIR }}/2_application_gateway/env-dev
        run: terraform plan -out=tfplan

      - name: "Terraform Apply"
        working-directory: ${{ env.WORKING_DIR }}/2_application_gateway/env-dev
        run: terraform apply "tfplan"

  # deploy-sql:
  #   name: "Deploy SQL Instances"
  #   runs-on: ubuntu-latest
  #   needs: workloads-deploy
  #   defaults:
  #     run:
  #       working-directory: ${{env.WORKING_DIR}}/sqlmi
  #   env:
  #     ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  #     ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  #     ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_PROD_SUBSCRIPTION_ID }}
  #     ARM_ACCESS_KEY: ${{ secrets.STORAGE_ACCESS_KEY }}
  #   steps:
  #     - name: "Checkout Repository"
  #       uses: actions/checkout@v4

  #     # - name: Setup Node.js environment
  #     #   uses: actions/setup-node@v3
  #     #   with:
  #     #     node-version: '20'

  #     # - name: Verify Node.js installation
  #     #   run: |
  #     #     node -v
  #     #     npm -v

  #     - name: "Setup Terraform"
  #       uses: actions/hashicorp_setup-terraform@v3

  #     - name: Set environment variable
  #       run: |
  #         echo "TF_VAR_AZURE_CLIENT_SECRET=${{ secrets.SERVICEPRINCIPALKEY }}"

  #     - uses: actions/terraform-linters_setup-tflint@v4

  #     - name: Show version
  #       run: tflint --version

  #     - name: Init TFLint
  #       run: tflint --init
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}

  #     - name: Run TFLint
  #       run: tflint -f compact

  #     - name: tfsec
  #       uses: actions/aquasecurity_tfsec-action@v1.0.0
  #       with:
  #         args: --exclude=AZU020

  #     - name: "Azure Login"
  #       uses: actions/azure_login@v1
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.HUB_SUB_ID }}

  #     - name: "Terraform Init"
  #       working-directory: ${{ env.WORKING_DIR }}/sqlmi
  #       run: terraform init

  #     - name: "Terraform Plan"
  #       working-directory: ${{ env.WORKING_DIR }}/sqlmi
  #       run: terraform plan -out=tfplan

  #     - name: "Terraform Apply"
  #       working-directory: ${{ env.WORKING_DIR }}/sqlmi
  #       run: terraform apply "tfplan" 